plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id 'org.jetbrains.kotlinx.kover' version '0.6.1'
    id "com.jfrog.artifactory" version "4.28.4"
    id 'maven-publish'
}

group = 'ru.talenttech.xqa'
version = '0.0.0'

def libraryVersion = '0.0.1'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.22'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'
    implementation 'io.rest-assured:xml-path:5.3.0'
    implementation 'org.assertj:assertj-core:3.18.1'
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.7.0'
    ktlint 'com.pinterest:ktlint:0.47.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.4'
    implementation 'org.slf4j:slf4j-simple:2.0.5'
    api 'org.json:json:20220924'
    api 'com.google.protobuf:protobuf-java:3.21.9'
    api('com.google.protobuf:protobuf-java-util:3.21.9') {
        exclude group: 'com.google.guava', module: 'guava'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    contextUrl = "${artifactory_context_url}"
    publish {
        repository {
            repoKey = "${artifactory_repo_key}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
        defaults {
            publications('mavenJava')
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    mainClass.set("com.pinterest.ktlint.Main")
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
check.dependsOn ktlint


task bumpVersion {
    doLast {
        def parsedVersion = version
        String[] version = Arrays.asList(parsedVersion.split("\\."))
        String releaseType = project.findProperty("releaseType")
        def majorVersion = version[0]
        def minorVersion = version[1]
        def patchVersion = version[2]
        String resultVersion = null
        switch (releaseType) {
            case "major":
                resultVersion = "${Integer.valueOf(majorVersion) + 1}.0.0"
                break
            case "minor":
                resultVersion = "${majorVersion}.${Integer.valueOf(minorVersion) + 1}.0"
                break
            case "patch":
                resultVersion = "${majorVersion}.${minorVersion}.${Integer.valueOf(patchVersion) + 1}"
                break
        }
        String s = buildFile.getText().replaceFirst("version = '$parsedVersion'", "version = '$resultVersion'")
        buildFile.write(s) //replace the build file's text
        def properties = new Properties()
        properties.setProperty("library_version", resultVersion)
        file("src/main/resources/info.properties").withOutputStream { properties.store(it, null) }
    }
}